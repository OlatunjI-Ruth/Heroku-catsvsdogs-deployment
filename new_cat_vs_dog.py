# -*- coding: utf-8 -*-
"""new cat vs dog.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pv_4f4wzp_g0rSzJbN8VB20ScOZMMG_I
"""

from google.colab import drive
drive.mount('/content/drive')

from google.colab import files
files.upload()

import tensorflow as tf

import matplotlib.pylab as plt

import tensorflow_hub as hub
import tensorflow_datasets as tfds

from tensorflow.keras import layers

import logging
logger = tf.get_logger()
logger.setLevel(logging.ERROR)

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d tongpython/cat-and-dog

import tensorflow as tf
from urllib.request import urlretrieve
import zipfile
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import numpy as np

zip_ref = zipfile.ZipFile(r'/content/cat-and-dog.zip', 'r') #Opens the zip file in read mode
zip_ref.extractall('/home') #Extracts the files into the /tmp folder
zip_ref.close()

training_dir = '/home/training_set/training_set/'
validation_dir = '/home/test_set/test_set'

train_datagen = ImageDataGenerator(rescale=1./255,
  rotation_range=40,
  width_shift_range=0.2,
  height_shift_range=0.2,
  shear_range=0.2,
  zoom_range=0.2,
  horizontal_flip=True,
  fill_mode='nearest'
 )

Batch_size = 100
IMAGE_RES = 224
train_data_gen = train_datagen.flow_from_directory(directory=training_dir,
                                                           target_size=(IMAGE_RES, IMAGE_RES),
                                                           batch_size=Batch_size,
                                                           shuffle=True,
                                                           class_mode='binary')

validation_image_generator = ImageDataGenerator(rescale=1./255)

validation_data_gen = validation_image_generator.flow_from_directory(directory=validation_dir, 
                                                                     target_size=(IMAGE_RES, IMAGE_RES),
                                                                     batch_size=Batch_size, 
                                                                     class_mode='binary',
                                                                     shuffle=False)







Batch_size = 100
IMAGE_RES = 224
URL = "https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/2"
model = tf.keras.Sequential([
                             hub.KerasLayer(URL,input_shape=(IMAGE_RES, IMAGE_RES,3)),
                             layers.Dense(2, activation='softmax')])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

Epochs = 15

history = model.fit(train_data_gen,
                    epochs=Epochs,
                    validation_data=validation_data_gen)

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

loss = history.history['loss']
val_loss = history.history['val_loss']

epochs_range = range(Epochs)

plt.figure(figsize=(8, 8))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')
plt.savefig('./foo.png')
plt.show()

from tensorflow.keras.models import load_model
model.save('model_mobilne.h5')

predictions = model.predict(validation_data_gen)

predictions[0]

predictions= np.argmax(predictions[1])

predictions







